{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setquery","weather","setweather","className","main","temp","style","color","textAlign","paddingTop","type","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","placeholder","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","wind","speed","temp_min","temp_max","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+KAIMA,EACA,mCADAA,EAEA,2CA+DSC,MA7Df,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACRC,EADQ,KACDC,EADC,OAEeF,mBAAS,IAFxB,mBAERG,EAFQ,KAECC,EAFD,KA2Bb,OAAQ,mCACN,qBAAKC,UAAkC,oBAAfF,EAAQG,MAC9BH,EAAQG,KAAKC,KAAO,GAAM,WAAsB,MADlD,SAEE,iCAAM,oBAAIC,MAAO,CAACC,MAAM,QAASC,UAAU,SAAUC,WAAW,QAA1D,yBACN,qBAAKN,UAAU,aAAf,SACA,uBACAO,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAEZ,EAASY,EAAEC,OAAOC,QAC/BA,MAAOf,EACPgB,WA9BS,SAAAC,GACF,UAAVA,EAAIC,KACLC,MAAM,GAAD,OAAItB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDuB,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJpB,EAAWoB,GACXtB,EAAS,QAyBPG,UAAU,aACVoB,YAAY,qBAEY,oBAAftB,EAAQG,KAAuB,gCACxC,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQuB,KAAnC,IAA0CvB,EAAQwB,IAAIC,WACtD,qBAAKvB,UAAU,OAAf,SAzBa,SAACwB,GAClB,IAEEC,EADO,CAAC,SAAU,SAAU,UAAW,YAAY,WAAW,SAAU,YAC7DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAJW,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAIlGL,EAAEM,YACfC,EAAKP,EAAEQ,cACZ,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAkBJE,CAAY,IAAIC,WAEvC,sBAAKlC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBmC,KAAKC,MAAMtC,EAAQG,KAAKC,MAA/C,WACA,sBAAKF,UAAU,UAAf,UAA0BF,EAAQA,QAAQ,GAAGG,KAA7C,mBAIF,sBAAKD,UAAU,sBAAf,UACA,sBAAKA,UAAU,OAAf,cAAuB,mBAAGA,UAAU,4BAApC,SAAwEF,EAAQuC,KAAKC,MAArF,cACA,sBAAKtC,UAAU,UAAf,UAAyB,mBAAGA,UAAU,uBAAtC,QAAoEF,EAAQG,KAAKsC,SAAjF,mBAA4GzC,EAAQG,KAAKuC,SAAzH,kBAGG,GA1BL,YC1BSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.330afeb1.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport \"weather-icons/css/weather-icons.css\"\n\n\nconst api = {\nkey : \"37559b7699a3c6159fe73d16b6f2697c\",\nbase :\"https://api.openweathermap.org/data/2.5/\"\n}\nfunction App() {\nconst [query, setquery] = useState('');\nconst [weather, setweather] = useState('');\n\n\n\nconst search = evt =>{\nif(evt.key===\"Enter\"){\n  fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n  .then(res=>res.json())\n  .then(result=>{\n    setweather(result);\n    setquery('');\n   });\n}\n}\n\n\n  const dateBuilder =(d)=>{\n    var months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\" ,\"Wednesday\",\"Thursday\",\"Friday\" ,\"Saturday\"];\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month=months[d.getMonth()];\n  let year=d.getFullYear();\n return `${day} ${date} ${month} ${year}`\n  }\n  return (<>\n    <div className={(typeof weather.main !=\"undefined\") ?\n    ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\n      <main><h2 style={{color:\"white\", textAlign:\"center\", paddingTop:'10px'}}>Weather App</h2>\n      <div className=\"search-box\">\n      <input\n      type=\"text\"\n      onChange={e=>setquery(e.target.value)}\n      value={query}\n      onKeyPress={search}\n      className=\"search-bar\"\n      placeholder=\"     Search...\" />\n      </div>\n      {(typeof weather.main !=\"undefined\") ? (<div>\n      <div className=\"location-box\">\n        <div className=\"location\">{weather.name},{weather.sys.country}</div>\n        <div className=\"date\">{dateBuilder(new Date())}</div>\n        </div>\n        <div className=\"weather-box\">\n          <div className=\"temp\">{Math.round(weather.main.temp)}°c</div>\n          <div className=\"weather\">{weather.weather[0].main}  &nbsp;&nbsp;\n          \n          </div>\n        </div>\n        <div className=\"weather-instruction\">\n        <div className=\"wind\"> <i className=\"wi wi-strong-wind Wind \"/> &nbsp; {weather.wind.speed} km/hr  </div> \n        <div className=\"min-max\"><i className=\"wi wi-thermometer \"/> &nbsp;{weather.main.temp_min} °c &nbsp;&nbsp; {weather.main.temp_max} °c</div>\n        </div>\n        </div>\n       ) :('') } </main>\n    </div></>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}